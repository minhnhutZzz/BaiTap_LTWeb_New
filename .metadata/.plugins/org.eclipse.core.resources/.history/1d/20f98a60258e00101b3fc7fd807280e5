package LTW3.Controller.admin;

import java.io.IOException;
import java.util.List;

import jakarta.servlet.Filter;
import jakarta.servlet.FilterChain;
import jakarta.servlet.FilterConfig;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebFilter;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import LTW3.Entity.User;
import LTW3.Entity.Category;
import LTW3.Service.CategoryService;
import LTW3.Service.Impl.CategoryServiceImpl;

@WebFilter(urlPatterns = {"/admin/home", "/manager/home", "/user/home"})
public class AuthFilter implements Filter {

    @Override
    public void init(FilterConfig filterConfig) throws ServletException {
        // Có thể để trống nếu không cần cấu hình thêm
    }

    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain)
            throws IOException, ServletException {
        
        HttpSession session = request.getSession();
        User user = (User) session.getAttribute("user");
        String url = request.getRequestURI();

        // Nếu người dùng đã đăng nhập
        if (user != null) {
            CategoryService categoryService = new CategoryServiceImpl();
            List<Category> listCategory;

            // Kiểm tra quyền người dùng và lấy dữ liệu
            if (user.getRoleid() == 1 || user.getRoleid() == 3) {
                listCategory = categoryService.findAll();  // Admin và User thấy tất cả
            } else {
                listCategory = categoryService.findByUser(user);  // Manager chỉ thấy của mình
            }
            request.setAttribute("categorys", listCategory);

            // Phân quyền cho các trang home
            if (url.contains("admin")) {
                if (user.getRoleid() == 1) {
                    // Nếu là Admin, tiếp tục với request
                    chain.doFilter(request, response);
                } else {
                    response.sendRedirect(request.getContextPath() + "/login");
                }
            } else if (url.contains("manager")) {
                if (user.getRoleid() == 2) {
                    // Nếu là Manager, tiếp tục với request
                    chain.doFilter(request, response);
                } else {
                    response.sendRedirect(request.getContextPath() + "/login");
                }
            } else if (url.contains("user")) {
                if (user.getRoleid() == 5) {
                    // Nếu là User, tiếp tục với request
                    chain.doFilter(request, response);
                } else {
                    response.sendRedirect(request.getContextPath() + "/login");
                }
            }
        } else {
            // Nếu chưa đăng nhập, chuyển hướng đến trang login
            response.sendRedirect(request.getContextPath() + "/login");
        }
    }

    @Override
    public void destroy() {
        // Có thể để trống nếu không cần thực hiện cleanup
    }
}
